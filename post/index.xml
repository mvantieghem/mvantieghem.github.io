<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog | Michelle VanTieghem</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 14 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Blog</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Building a Website with Blogdown, Hugo and Github Pages</title>
      <link>/post/hugo_webpage/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/hugo_webpage/</guid>
      <description>&lt;p&gt;A few months ago, I attended an 
&lt;a href=&#34;https://www.rladiesnyc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R ladies NYC&lt;/a&gt;
 workshop on creating websites with 
&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blogdown&lt;/a&gt;
 with 
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo themes.&lt;/a&gt;
 For the R user who is looking to generate their own webpage - look no further! The Blogdown R package has powerful capabilities without needing to learn html or java, and Hugo has a seemingly endless choice of beautiful website themes. There are many resources available, but it&#39;s easy to get bogged down in the details when you&#39;re just getting started.&lt;/p&gt;
&lt;p&gt;Here, I am going to walk through a step-by-step guide to generate a webpage from beginning to end, using  &lt;strong&gt;Blogdown, Hugo and Github pages.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why use 
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github pages&lt;/a&gt;
 to deploy the website? First, it&#39;s free - every github user has a free domain to use. Second, it&#39;s easily linked to your github profile. Third, it really encourages you to version control your website!&lt;/p&gt;
&lt;h2 id=&#34;part-1-build-your-website&#34;&gt;Part 1: Build your website&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Choose a theme for your website&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hugo has a wide array of website themes, which can be found 
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here.&lt;/a&gt;
 Themes dictate both the aethetics and the format of a website. Choose wisely - once you start with a certain theme, it&#39;s hard to switch themes later.&lt;/p&gt;
&lt;p&gt;After you&#39;ve chosen a theme, click &amp;ldquo;Homepage&amp;rdquo; on the theme website, which leads you to the owner&#39;s github repository for the theme. We will use this github project (e.g. &amp;ldquo;user/themename&amp;rdquo;) as input to the blogdown::new_website function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use blogdown to generate a website template&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now we&#39;re ready to start working with blogdown. Start a new R project, and then generate a new blogdown website using your chosen theme.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;blogdown&#39;)
install.packages(&#39;hugo&#39;)
library(blogdown)
blogdown::new_website(theme = &amp;quot;user/themename&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Edit content on your website&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every theme has a slightly different setup, but we will walk through the basic overview. I also recommend reading the theme documentation for more details.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Config and menu files:&lt;/strong&gt; Contain the backbone structure of your website. Config files designate the url, theme, and title of your website. Menu files designate the &amp;ldquo;widgets&amp;rdquo; or components of your website (which varies by theme). &lt;em&gt;Disclaimer: depending on the theme, these files may be in the main directory or different locations (e.g. in the &amp;ldquo;data&amp;rdquo; or &amp;ldquo;config&amp;rdquo; folders) and might end with either &amp;ldquo;.toml&amp;rdquo; or &amp;ldquo;.yml&amp;rdquo;.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content:&lt;/strong&gt; Where most of your editing will take place. The organization of this folder will vary depending on your chosen theme, and the files here should coincide with your menu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static:&lt;/strong&gt; The storage location for any static files that you add to your website. For example, you can add PDF files or images that you link in the content.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Themes:&lt;/strong&gt; Stores the necessary code to build the website using your chosen theme. &lt;em&gt;Do not edit!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public:&lt;/strong&gt; Contains the live website, built from the contents and configurations. &lt;em&gt;Do not edit!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Preview your changes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blogdown also makes it really easy to preview changes. With this commmand, the webpage will display in the viewer panel and can be expanded to full view, just like any other html document.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blogdown::serve_site()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is some trial-and-error to figure out how changes in the content files correspond to changes in the website. Try making a simple change first, like changing the title of your webpage in the config file, and see how it changes your webpage.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do I need to run serve_site() after every change I make?&lt;/em&gt;&lt;br&gt;
It depends. After running it once, the webpage preview will automatically refresh after each time you save changes to existing files, but if you remove or add new widgets, you will need to re-run the command to view those structural changes.&lt;/p&gt;
&lt;h2 id=&#34;part-2-link-the-website-to-github--github-pages&#34;&gt;Part 2: Link the website to Github &amp;amp; Github pages&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Make a &amp;lsquo;webpage&amp;rsquo; repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Websites change, and websites also break&amp;hellip; but this all becomes much more manageable with version control! First, you want to make a new github repository, and link it to a new R project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Not familiar with linking github and R?&lt;/em&gt;
When making a new new R project, choose the option &amp;lsquo;from version control&amp;rsquo;, then &amp;lsquo;Github&amp;rsquo;. On the next page, add the link to your git repository.&lt;/p&gt;
&lt;p&gt;The &amp;lsquo;public&amp;rsquo; folder should not be added to this  repository!
An easy way to deal with this is to add the public directory to your .gitignore file.&lt;/p&gt;
&lt;p&gt;When you&#39;re happy with the content of your webpage, add, commit and push the website content to the ‘webpage’ repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make a &amp;lsquo;github pages&amp;rsquo; repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hugo, like many other website platforms, separates the editable content of your website from the &lt;em&gt;live&lt;/em&gt; website content, also commonly referred to as the &amp;ldquo;public&amp;rdquo; content. To deploy the website, we will sync the &amp;ldquo;public&amp;rdquo; folder to Github pages.&lt;/p&gt;
&lt;p&gt;First, make a new repository on github called &lt;strong&gt;username.github.io&lt;/strong&gt;. Github pages will automatically generate a webpage from any repository with this specific name, so unfortunately you cannot be creative here. Then, add the &amp;lsquo;username.github.io&amp;rsquo; repository as a submodule of the &amp;lsquo;webpage&amp;rsquo; repository.&lt;/p&gt;
&lt;p&gt;For these few lines of code, we need to excute git commands in terminal, outside of R studio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cd /path-to-webpage/** 
rm -rf public
submodule add -b master https://github.com/username/username.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This enables the &amp;lsquo;username.github.io.git&amp;rsquo; repository to contain only the &amp;lsquo;public&amp;rsquo; directory of your website.&lt;/p&gt;
&lt;p&gt;Finally, update the website address in the &lt;strong&gt;config.toml&lt;/strong&gt; file. Simply replace &amp;ldquo;baseURL&amp;rdquo; with your github pages url (&lt;a href=&#34;https://username.github.io)&#34;&gt;https://username.github.io)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deploy your changes to the live website&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you&#39;re ready to make your webpage live, the process is pretty painless. Simply add, commit and push your public website content to the github pages repsitory, and the webpage will automatically update at &lt;a href=&#34;https://username.github.io&#34;&gt;https://username.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cd webpage/public
git add . 
git commit -m &amp;quot;my message here&amp;quot;
git push origin master 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You now have a functioning website built with github, R and hugo!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For additional information and trouble-shooting, see the related 
&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo documentation&lt;/a&gt;
 for hosting websites on github pages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For an excellent resource on using github with R, check out this excellent resource: 
&lt;a href=&#34;https://happygitwithr.com/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Happy Git with R&lt;/a&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more blogdown details, far beyond the scope covered here: 
&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blogdown documentation&lt;/a&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
